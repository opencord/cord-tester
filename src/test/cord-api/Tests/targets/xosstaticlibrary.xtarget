*** Settings ***
Documentation     Setup and Teardown Functionality for XOS API Tests
Library           Collections
Library           String
Library           OperatingSystem
Library           XML
Library           RequestsLibrary
Library           CORDRobot
Library           ImportResource  resources=CORDRobot
Variables         ../Properties/RestApiProperties.py

*** Variables ***
${test_string}        teststring
${test_string2}       teststring2
${test_float}         3.14
${test_role}          admin
${test_direction}     in
${test_flavor}        m1.small
${test_vlan_tag}      1000
${test_email}         testuser@opencord.org
${test_int32}         100
${test_uint32}        100
${test_ip_address}    2.2.2.2

*** Keywords ***
Verify API Functionality
    [Arguments]    ${type}    ${endpoint}    ${data}=${EMPTY}    ${data_id}=${EMPTY}    ${key}=${EMPTY}
    Run Keyword If    "${type}" == "RETRIEVE"    CORD Get    ${endpoint}    ${data_id}    ${data}    ${key}
    Run Keyword If    "${type}" == "CREATE"   CORD Post    ${endpoint}    ${data}
    Run Keyword If    "${type}" == "UPDATE"   CORD Put    ${endpoint}    ${data}    ${data_id}
    Run Keyword If    "${type}" == "DELETE"    CORD Delete    ${endpoint}    ${data_id}

CORD Get
    [Documentation]    Make a GET call to the CORD controller
    [Arguments]    ${service}    ${id}    ${value}    ${key}
    ${resp}=    Get Request    ${SERVER_IP}    ${service}/${id}
    Log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    200
    ${updated_value}=    Run Keyword If    '${key}' != 'null'    Get From Dictionary    ${resp.json()}    ${key}
    ${updated_value}=    Run Keyword If    '${key}' != 'null'    Remove String    ${updated_value}    "
    Run Keyword If    '${key}' != 'null'    Should Contain    "${value}"    ${updated_value}
    [Return]    ${resp}

CORD Post
    [Documentation]    Make a POST call to the CORD controller
    [Arguments]    ${service}    ${data}
    ${data}=    Evaluate    json.dumps(${data})    json
    ${resp}=    Post Request    ${SERVER_IP}    uri=${service}    data=${data}
    Log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    200
    ${id}=    Get From Dictionary    ${resp.json()}    id
    Set Suite Variable    ${id}
    [Return]    ${resp}

CORD Put
    [Documentation]    Make a PUT call to the CORD controller
    [Arguments]    ${service}    ${data}    ${data_id}
    ${data}=    Evaluate    json.dumps(${data})    json
    ${resp}=    Put Request    ${SERVER_IP}    uri=${service}/${data_id}    data=${data}
    Log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    200
    ${id}=    Get From Dictionary    ${resp.json()}    id
    Set Suite Variable    ${id}
    [Return]    ${resp}

CORD Delete
    [Documentation]    Make a DELETE call to the CORD controller
    [Arguments]    ${service}    ${data_id}
    ${resp}=    Delete Request    ${SERVER_IP}    uri=${service}/${data_id}
    Log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    200
    [Return]    ${resp}

Generate JSON Data
    {%- for m in proto.messages -%}
    {%- if m.name not in  ['XOSBase'] -%}
    {% autoescape false %}
    {% endautoescape %}
    ${json_{{ m.name | lower }}_1}=    Create Dictionary
    ${json_{{ m.name | lower }}_amend_1}=    Create Dictionary
    ${json_{{ m.name | lower}}_amend_key}=    Set Variable    null
    Set Suite Variable    ${json_{{ m.name | lower}}_amend_key}
    # set required fields for {{ m.name | lower }} object
    {% for f in m.fields + xproto_base_fields(m, proto.message_table) -%}
    {% if f.modifier == "required" and f.options.blank != "True" -%}
    {% if not f.options.default -%}
    {% if f.link -%}
    ## check if dependent model exists, if not, create it
    ${tmp_{{ f.options.model | lower }}_id}=    Create Dependent Model    {{ f.options.model }}
    #${tmp_{{ f.options.model | lower }}_id}=    Create {{ f.options.model }}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    {{ f.name }}_id=${tmp_{{ f.options.model | lower }}_id}
    {% elif f.name == "created" or f.name == "amend" or f.name =="expires" or f.name =='granted' -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    {{ f.name }}=${test_float}
    {% elif f.name == "role" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    {{ f.name }}=${test_role}
    {% elif f.name == "direction" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    {{ f.name }}=${test_direction}
    {% elif f.name == "flavor" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    {{ f.name }}=${test_flavor}
    {% elif f.name == "s_tag" and m.name == "BNGPortMapping" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    {{ f.name }}=${test_vlan_tag}
    {% else -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    {{ f.name }}=${test_{{ f.type }}}
    {% if f.name == "created" or f.name == "amend" or f.name =="expires" or f.name =='granted' -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    {{ f.name }}=${test_float}
    {% else -%}
    {% if loop.index0 == 0 -%}
    ${json_{{ m.name | lower}}_amend_key}=    Set Variable    {{ f.name }}
    Set To Dictionary    ${json_{{ m.name | lower }}_amend_1}    {{ f.name }}=${test_{{ f.type }}}
    {% endif -%}
    {% endif -%}
    {% endif -%}
    {% endif -%}
    {% endif -%}
    {% endfor -%}
    {% if  m.name  == "User" -%}
    ${json_{{ m.name | lower}}_email}=    Set Variable    testuser@opencord.org
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    email=${json_{{ m.name | lower }}_email}
    ${json_{{ m.name | lower}}_email_amend_1}=    Set Variable    testuseramend@opencord.org
    Set To Dictionary    ${json_{{ m.name | lower }}_amend_1}    email=${json_{{ m.name | lower }}_email_amend_1}
    {% endif %}
    {% if  m.name  == "Site" -%}
    ${json_{{ m.name | lower}}_login_base_tmp}=    Set Variable    testloginbase
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    login_base=${json_{{ m.name | lower }}_login_base_tmp}
    {% endif %}
    {% if  m.name  == "Flavor" -%}
    ${json_{{ m.name | lower}}_flavor_tmp}=    Set Variable    m1.small
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    flavor=${json_{{ m.name | lower }}_flavor_tmp}
    {% endif %}
    {% if  m.name  == "ServiceGraphConstraint" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    constraints=${test_string}
    {% endif %}
    {% if  m.name  == "Slice" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    name=testloginbase
    Set To Dictionary    ${json_{{ m.name | lower }}_amend_1}    name=testloginbase2
    {% endif -%}
    {% if  m.name  == "ProgranServiceInstance" -%}
    Set To Dictionary   ${json_{{ m.name | lower }}_1}    name=${test_string}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    CellIndividualOffset=1
    Set To Dictionary    ${json_{{ m.name | lower }}_amend_1}    name=${test_string}
    Set To Dictionary    ${json_{{ m.name | lower }}_amend_1}    CellIndividualOffset=1
    {% endif %}
    {% if  m.name  == "RCORDSubscriber" -%}
    ## Create req service owner for rcord subscriber
    Create Dependent Owner Model    /xosapi/v1/rcord/rcordservices    {"name": "testrcordservice", "access": "unknown"}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    owner_id=${id}
    ${rcord_tmp_service_id}=    Set Variable    ${id}
    Set Suite Variable    ${rcord_tmp_service_id}
    {% endif %}
    {% if  m.name  == "HippieOSSServiceInstance" -%}
    ## Create req service owner for hippie oss service instance
    Create Dependent Owner Model    /xosapi/v1/hippie-oss/hippieossservices    {"name": "testhippieservice"}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    owner_id=${id}
    {% endif %}
    {% if  m.name  == "MCordSubscriberInstance" -%}
    ## Create req service owner for hippie oss service instance
    Create Dependent Owner Model    /xosapi/v1/mcord/mcordsubscriberservices    {"name": "testmcordservice"}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    owner_id=${id}
    {% endif %}
    {% if  m.name  == "AddressManagerServiceInstance" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    public_ip=2.2.2.2
    Set To Dictionary    ${json_{{ m.name | lower }}_amend_1}    public_ip=3.3.3.3
    {% endif %}
    {% if  m.name  == "RCORDIpAddress" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    ip=2.2.2.2
    Set To Dictionary    ${json_{{ m.name | lower }}_amend_1}    ip=3.3.3.3
    {% endif %}
    {% if  m.name  == "ONUDevice" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    serial_number=testserialnumber
    Set To Dictionary    ${json_{{ m.name | lower }}_amend_1}    serial_number=amendserialnumber
    {% endif %}
    {% if  m.name  == "TechnologyProfile" -%}
    ${json_profile}=    Set Variable    {\\\"test\\\":\\\"test\\\"}
    ${json_profile2}=    Set Variable    {\\\"test2\\\":\\\"test2\\\"}
    Set To Dictionary    ${json_{{ m.name | lower }}_1}    profile_value=${json_profile}
    Set To Dictionary    ${json_{{ m.name | lower }}_amend_1}    profile_value=${json_profile2}
    {% endif %}
    #${json_{{ m.name | lower }}_1}=     To JSON    ${json_{{ m.name | lower }}_1}
    #${json_{{ m.name | lower }}_amend_1}=     To JSON    ${json_{{ m.name | lower }}_amend_1}
    Set Suite Variable    ${json_{{ m.name | lower }}_1}
    Set Suite Variable    ${json_{{ m.name | lower }}_amend_1}
    {% endif -%}
    {% endfor %}

{% for m in proto.messages %}
{%- if m.name not in  ['XOSBase'] -%}
Create {{ m.name }}
    ##Creating {{ m.name | lower }} object
    ${json_{{ m.name | lower }}_tmp}=    Set Variable    { }
    # set required fields for {{ m.name | lower }} object
    {% for f in m.fields + xproto_base_fields(m, proto.message_table) -%}
    {% if f.link -%}
    {% if f.modifier == "required" and f.options.blank != "True"-%}
    # create dependent {{ f.options.model }}
    ## check if dependent model exists, if not, create it
    ${dependent_{{ f.options.model | lower }}_id}=    Create Dependent Model    {{ f.options.model }}
    #${tmp_{{ f.options.model | lower }}_id}=    Create {{ f.options.model }}
    #${dependent_{{ f.options.model | lower }}_id}=    Create {{ f.options.model }}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    {{ f.name }}_id=${dependent_{{ f.options.model | lower }}_id}
    {% endif -%}
    {% else -%}
    {% if f.modifier == "required" and f.options.blank != "True"-%}
    {% if not f.options.default -%}
    {% if m.name == "User" and f.name == "email" -%}
    Set To Dictionary    ${json_user_tmp}   email="${test_email}"
    {% else -%}
    {% if f.name == "created" or f.name == "amend" or f.name =="expires" or f.name =='granted' -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    {{ f.name }}=${test_float}
    {% elif f.name == "name" -%}
    ${json_{{ m.name | lower}}_name_tmp}=   Generate Random Value    {{ f.type }}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    {{ f.name }}=${json_{{ m.name | lower}}_name_tmp}
    {% elif f.name == "role" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    {{ f.name }}=${test_role}
    {% elif f.name == "direction" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    {{ f.name }}=${test_direction}
    {% elif f.name == "flavor" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    {{ f.name }}=${test_flavor}
    {% elif f.name == "s_tag" and m.name == "BNGPortMapping" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    {{ f.name }}=${test_vlan_tag}
    {% else -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    {{ f.name }}=${test_{{ f.type }}}
    {% endif -%}
    {% endif -%}
    {% endif -%}
    {% endif -%}
    {% endif -%}
    {% endfor -%}
    {% if  m.name  == "Site" -%}
    ${json_{{ m.name | lower}}_login_base_tmp}=    Set Variable    testloginbase3
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    login_base=${json_{{ m.name | lower }}_login_base_tmp}
    {% endif %}
    {% if  m.name  == "Flavor" -%}
    ${json_{{ m.name | lower}}_flavor_tmp}=    Set Variable    m1.small
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    flavor=${json_{{ m.name | lower }}_flavor_tmp}
    {% endif %}
    {% if  m.name  == "ServiceGraphConstraint" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    contraints=${test_string}
    {% endif %}
    {% if  m.name  == "Slice" -%}
    ${json_{{ m.name | lower}}_name}=    Generate Random Slice Name
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    name=${json_{{ m.name | lower}}_name}
    {% endif -%}
    {% if  m.name  == "Network" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    permit_all_slices=true
    {% endif %}
    {% if  m.name  == "RCORDSubscriber" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    owner_id=${rcord_tmp_service_id}
    {% endif %}
    {% if  m.name  == "TechnologyProfile" -%}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    profile_value={'testprofile':'profiletest'}
    {% endif %}
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    no_policy=true
    Set To Dictionary    ${json_{{ m.name | lower }}_tmp}    no_sync=true
    #${json_{{ m.name | lower }}_tmp}=     To JSON    ${json_{{ m.name | lower }}_tmp}
    ${resp}=    CORD Post    /xosapi/v1/{{ xproto_unquote(m.options.app_label) }}/{{ xproto_pluralize(m) | lower}}    ${json_{{ m.name | lower }}_tmp}
    ${id_{{ m.name | lower }}_tmp}=    Get From Dictionary    ${resp.json()}    id
    Append To List    ${dependent_{{ m.name | lower }}_ids}    ${id_{{ m.name | lower }}_tmp}
    [Return]    ${id_{{ m.name | lower }}_tmp}
{% endif %}
{% endfor -%}

Create Dependent Model
    [Arguments]    ${model}
    ${result}    ${id}=    Run Keyword And Ignore Error    Create ${model}
    ${model_id}=    Set Variable If    "${result}" == "PASS"    ${id}    1
    [Return]    ${model_id}

Create Dependent Owner Model
    [Arguments]    ${model}    ${data}
    ${condition}    ${modelId}=    Check If Model Exists    ${model}
    ${resp}=    Run Keyword Unless    ${condition}    CORD Post    ${model}    ${data}
    ${id}=    Run Keyword Unless    ${condition}    Get From Dictionary    ${resp.json()}    id
    ${model_id}=    Set Variable If    ${condition}    ${modelId}    ${id}
    [Return]    ${model_id}

Check If Model Exists
    [Arguments]    ${service}
    ${resp}=    Get Request    ${SERVER_IP}    ${service}
    Log    ${resp.content}
    Should Be Equal As Strings    ${resp.status_code}    200
    ${jsondata}=    To Json    ${resp.content}
    ${length}=    Get Length    ${jsondata['items']}
    ${value}=    Run Keyword If    ${length}    Get From List    ${jsondata['items']}    0
    ${modelId}=    Run Keyword If    ${length}    Get From Dictionary    ${value}    id
    Run Keyword If    ${length}    Return From Keyword    True    ${modelId}
    [Return]    False    ${NONE}

Setup Tests
    [Documentation]    Find all dependent objects per model and create them and store them for later use
    {% for m in proto.messages %}
    {%- if m.name not in  ['XOSBase'] -%}
    ${model}=    Set Variable    {{ m.name | lower }}s
    @{dependent_{{ m.name | lower }}_ids}=    Create List    ${model}
    Set Suite Variable    @{dependent_{{ m.name | lower }}_ids}
    {% endif -%}
    {% endfor -%}
    @{dependent_models}=    Create List
    Set Suite Variable    ${dependent_models}
    ${auth} =    Create List    ${XOS_USER}    ${XOS_PASSWD}
    ${HEADERS}    Create Dictionary    Content-Type=application/json
    Create Session    ${SERVER_IP}    http://${SERVER_IP}:${SERVER_PORT}    auth=${AUTH}    headers=${HEADERS}
    Generate JSON Data

Teardown Tests
    [Documentation]    Delete all dependent objects created in Setup
    {% for m in proto.messages %}
    {%- if m.name not in  ['XOSBase'] -%}
    ${len}=    Get Length    ${dependent_{{ m.name | lower }}_ids}
    : FOR    ${INDEX}    IN RANGE    1    ${len}
    \    Run Keyword And Ignore Error    CORD Delete    /xosapi/v1/{{ xproto_unquote(m.options.app_label) }}/${dependent_{{ m.name | lower }}_ids[0]}    ${dependent_{{ m.name | lower }}_ids[${INDEX}]}
    {% endif -%}
    {% endfor -%}
    Delete All Sessions

